package client.mods.implementations;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;

import org.lwjgl.input.Mouse;

import client.mods.Hud;
import net.minecraft.client.gui.ScaledResolution;

public class CPS extends Hud {
	
	public CPS() {
        super("CPS", 75, 75);
    }

    private List<Long> leftClicks = new ArrayList<Long>();
    private List<Long> rightClicks = new ArrayList<Long>();
    private boolean leftWasPressed;
    private boolean rightWasPressed;
    private long leftLastPress;
    private long rightLastPress;

    private String getStringToRender() {
        String bracket1 = null, bracket2 = null;
        String toReturn = "Error!";
                bracket1 = "";
                bracket2 = "";

        toReturn = bracket1 + getLeftCPS() + " |" + (" " + getRightCPS() + " " +  ("CPS") + bracket2);

        return toReturn;

    }

    @Override
    public int getHeight() {
        return fr.FONT_HEIGHT + 2;
    }

    @Override
    public int getWidth() {
            return (int) fr.getStringWidth(getStringToRender() + 1);
    }


    @Override
    public void onRenderHUD() {
    	super.onRenderHUD();
        final boolean leftPressed = Mouse.isButtonDown(0);
        final boolean rightPressed = Mouse.isButtonDown(1);
        if (leftPressed != this.leftWasPressed) {
            this.leftWasPressed = leftPressed;
            this.leftLastPress = System.currentTimeMillis();
            if (leftPressed) {
                this.leftClicks.add(this.leftLastPress);
            }
        }
        if (rightPressed != this.rightWasPressed) {
            this.rightWasPressed = rightPressed;
            this.rightLastPress = System.currentTimeMillis();
            if (rightPressed) {
                this.rightClicks.add(this.rightLastPress);
            }
        }
        ScaledResolution sr = new ScaledResolution(mc);
        fr.drawString(getStringToRender(), getX() + 3, getY() + 2, -1);
    }

    @Override
    public void onRenderHUDScreen() {
    	super.onRenderHUDScreen();
        final boolean leftPressed = Mouse.isButtonDown(0);
        final boolean rightPressed = Mouse.isButtonDown(1);
        if (leftPressed != this.leftWasPressed) {
            this.leftWasPressed = leftPressed;
            this.leftLastPress = System.currentTimeMillis();
            if (leftPressed) {
                this.leftClicks.add(this.leftLastPress);
            }
        }
        if (rightPressed != this.rightWasPressed) {
            this.rightWasPressed = rightPressed;
            this.rightLastPress = System.currentTimeMillis();
            if (rightPressed) {
                this.rightClicks.add(this.rightLastPress);
            }
        }
            fr.drawString(getStringToRender(), getX() + 3, getY() + 2, -1);
    }

    private int getLeftCPS() {
        final long time = System.currentTimeMillis();
        this.leftClicks.removeIf(aLong -> aLong + 100L < time);
        return this.leftClicks.size();
    }

    private int getRightCPS() {
        final long time = System.currentTimeMillis();
        this.rightClicks.removeIf(aLong -> aLong + 100L < time);
        return this.rightClicks.size();
    }
}